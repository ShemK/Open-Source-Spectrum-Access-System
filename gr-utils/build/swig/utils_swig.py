# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils_swig', [dirname(__file__)])
        except ImportError:
            import _utils_swig
            return _utils_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_utils_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utils_swig = swig_import_helper()
    del swig_import_helper
else:
    import _utils_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _utils_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _utils_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _utils_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _utils_swig.high_res_timer_epoch()
class log10_vfvf(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::log10_vfvf.

    To avoid accidental use of raw pointers, utils::log10_vfvf's constructor is in a private implementation class. utils::log10_vfvf::make is the public interface for creating new instances.

    Args:
        n : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int n) -> log10_vfvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::log10_vfvf.

        To avoid accidental use of raw pointers, utils::log10_vfvf's constructor is in a private implementation class. utils::log10_vfvf::make is the public interface for creating new instances.

        Args:
            n : 
        """
        return _utils_swig.log10_vfvf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_log10_vfvf
    __del__ = lambda self : None;
log10_vfvf_swigregister = _utils_swig.log10_vfvf_swigregister
log10_vfvf_swigregister(log10_vfvf)

def log10_vfvf_make(*args, **kwargs):
  """
    log10_vfvf_make(int n) -> log10_vfvf_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::log10_vfvf.

    To avoid accidental use of raw pointers, utils::log10_vfvf's constructor is in a private implementation class. utils::log10_vfvf::make is the public interface for creating new instances.

    Args:
        n : 
    """
  return _utils_swig.log10_vfvf_make(*args, **kwargs)

class log10_vfvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::log10_vfvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::log10_vfvf)> self) -> log10_vfvf_sptr
        __init__(boost::shared_ptr<(gr::utils::log10_vfvf)> self, log10_vfvf p) -> log10_vfvf_sptr
        """
        this = _utils_swig.new_log10_vfvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(log10_vfvf_sptr self) -> log10_vfvf"""
        return _utils_swig.log10_vfvf_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_log10_vfvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(log10_vfvf_sptr self, int n) -> log10_vfvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::log10_vfvf.

        To avoid accidental use of raw pointers, utils::log10_vfvf's constructor is in a private implementation class. utils::log10_vfvf::make is the public interface for creating new instances.

        Args:
            n : 
        """
        return _utils_swig.log10_vfvf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(log10_vfvf_sptr self) -> unsigned int"""
        return _utils_swig.log10_vfvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(log10_vfvf_sptr self, int which, int delay)
        declare_sample_delay(log10_vfvf_sptr self, unsigned int delay)
        """
        return _utils_swig.log10_vfvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(log10_vfvf_sptr self, int which) -> unsigned int"""
        return _utils_swig.log10_vfvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(log10_vfvf_sptr self) -> int"""
        return _utils_swig.log10_vfvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(log10_vfvf_sptr self) -> double"""
        return _utils_swig.log10_vfvf_sptr_relative_rate(self)

    def start(self):
        """start(log10_vfvf_sptr self) -> bool"""
        return _utils_swig.log10_vfvf_sptr_start(self)

    def stop(self):
        """stop(log10_vfvf_sptr self) -> bool"""
        return _utils_swig.log10_vfvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(log10_vfvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.log10_vfvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(log10_vfvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.log10_vfvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(log10_vfvf_sptr self) -> int"""
        return _utils_swig.log10_vfvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(log10_vfvf_sptr self, int m)"""
        return _utils_swig.log10_vfvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(log10_vfvf_sptr self)"""
        return _utils_swig.log10_vfvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(log10_vfvf_sptr self) -> bool"""
        return _utils_swig.log10_vfvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(log10_vfvf_sptr self, int m)"""
        return _utils_swig.log10_vfvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(log10_vfvf_sptr self) -> int"""
        return _utils_swig.log10_vfvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(log10_vfvf_sptr self, int i) -> long"""
        return _utils_swig.log10_vfvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(log10_vfvf_sptr self, long max_output_buffer)
        set_max_output_buffer(log10_vfvf_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.log10_vfvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(log10_vfvf_sptr self, int i) -> long"""
        return _utils_swig.log10_vfvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(log10_vfvf_sptr self, long min_output_buffer)
        set_min_output_buffer(log10_vfvf_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.log10_vfvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(log10_vfvf_sptr self, int which) -> float
        pc_input_buffers_full(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(log10_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(log10_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_var(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(log10_vfvf_sptr self, int which) -> float
        pc_output_buffers_full(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(log10_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(log10_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_var(log10_vfvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.log10_vfvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(log10_vfvf_sptr self) -> float"""
        return _utils_swig.log10_vfvf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(log10_vfvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.log10_vfvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(log10_vfvf_sptr self)"""
        return _utils_swig.log10_vfvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(log10_vfvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.log10_vfvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(log10_vfvf_sptr self) -> int"""
        return _utils_swig.log10_vfvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(log10_vfvf_sptr self) -> int"""
        return _utils_swig.log10_vfvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(log10_vfvf_sptr self, int priority) -> int"""
        return _utils_swig.log10_vfvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(log10_vfvf_sptr self) -> std::string"""
        return _utils_swig.log10_vfvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(log10_vfvf_sptr self) -> std::string"""
        return _utils_swig.log10_vfvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(log10_vfvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.log10_vfvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(log10_vfvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.log10_vfvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(log10_vfvf_sptr self) -> long"""
        return _utils_swig.log10_vfvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(log10_vfvf_sptr self) -> basic_block_sptr"""
        return _utils_swig.log10_vfvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(log10_vfvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.log10_vfvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(log10_vfvf_sptr self) -> std::string"""
        return _utils_swig.log10_vfvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(log10_vfvf_sptr self, std::string name)"""
        return _utils_swig.log10_vfvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(log10_vfvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.log10_vfvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(log10_vfvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.log10_vfvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(log10_vfvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.log10_vfvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(log10_vfvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.log10_vfvf_sptr_message_subscribers(self, *args, **kwargs)

log10_vfvf_sptr_swigregister = _utils_swig.log10_vfvf_sptr_swigregister
log10_vfvf_sptr_swigregister(log10_vfvf_sptr)

log10_vfvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
log10_vfvf = log10_vfvf.make;

class psd_cvf(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::psd_cvf.

    To avoid accidental use of raw pointers, utils::psd_cvf's constructor is in a private implementation class. utils::psd_cvf::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        fft_len : 
        window_type : 
        alpha : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double samp_rate, int fft_len, int window_type, float alpha) -> psd_cvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::psd_cvf.

        To avoid accidental use of raw pointers, utils::psd_cvf's constructor is in a private implementation class. utils::psd_cvf::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            fft_len : 
            window_type : 
            alpha : 
        """
        return _utils_swig.psd_cvf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(psd_cvf self, double d_samp_rate)"""
        return _utils_swig.psd_cvf_set_samp_rate(self, *args, **kwargs)

    def set_fft_len(self, *args, **kwargs):
        """set_fft_len(psd_cvf self, int fft_len)"""
        return _utils_swig.psd_cvf_set_fft_len(self, *args, **kwargs)

    def set_window_type(self, *args, **kwargs):
        """set_window_type(psd_cvf self, int d_window)"""
        return _utils_swig.psd_cvf_set_window_type(self, *args, **kwargs)

    def set_average(self, *args, **kwargs):
        """set_average(psd_cvf self, float d_average)"""
        return _utils_swig.psd_cvf_set_average(self, *args, **kwargs)

    __swig_destroy__ = _utils_swig.delete_psd_cvf
    __del__ = lambda self : None;
psd_cvf_swigregister = _utils_swig.psd_cvf_swigregister
psd_cvf_swigregister(psd_cvf)

def psd_cvf_make(*args, **kwargs):
  """
    psd_cvf_make(double samp_rate, int fft_len, int window_type, float alpha) -> psd_cvf_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::psd_cvf.

    To avoid accidental use of raw pointers, utils::psd_cvf's constructor is in a private implementation class. utils::psd_cvf::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        fft_len : 
        window_type : 
        alpha : 
    """
  return _utils_swig.psd_cvf_make(*args, **kwargs)

class psd_cvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::psd_cvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::psd_cvf)> self) -> psd_cvf_sptr
        __init__(boost::shared_ptr<(gr::utils::psd_cvf)> self, psd_cvf p) -> psd_cvf_sptr
        """
        this = _utils_swig.new_psd_cvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(psd_cvf_sptr self) -> psd_cvf"""
        return _utils_swig.psd_cvf_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_psd_cvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(psd_cvf_sptr self, double samp_rate, int fft_len, int window_type, float alpha) -> psd_cvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::psd_cvf.

        To avoid accidental use of raw pointers, utils::psd_cvf's constructor is in a private implementation class. utils::psd_cvf::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            fft_len : 
            window_type : 
            alpha : 
        """
        return _utils_swig.psd_cvf_sptr_make(self, *args, **kwargs)

    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(psd_cvf_sptr self, double d_samp_rate)"""
        return _utils_swig.psd_cvf_sptr_set_samp_rate(self, *args, **kwargs)

    def set_fft_len(self, *args, **kwargs):
        """set_fft_len(psd_cvf_sptr self, int fft_len)"""
        return _utils_swig.psd_cvf_sptr_set_fft_len(self, *args, **kwargs)

    def set_window_type(self, *args, **kwargs):
        """set_window_type(psd_cvf_sptr self, int d_window)"""
        return _utils_swig.psd_cvf_sptr_set_window_type(self, *args, **kwargs)

    def set_average(self, *args, **kwargs):
        """set_average(psd_cvf_sptr self, float d_average)"""
        return _utils_swig.psd_cvf_sptr_set_average(self, *args, **kwargs)

    def history(self):
        """history(psd_cvf_sptr self) -> unsigned int"""
        return _utils_swig.psd_cvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(psd_cvf_sptr self, int which, int delay)
        declare_sample_delay(psd_cvf_sptr self, unsigned int delay)
        """
        return _utils_swig.psd_cvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(psd_cvf_sptr self, int which) -> unsigned int"""
        return _utils_swig.psd_cvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(psd_cvf_sptr self) -> int"""
        return _utils_swig.psd_cvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(psd_cvf_sptr self) -> double"""
        return _utils_swig.psd_cvf_sptr_relative_rate(self)

    def start(self):
        """start(psd_cvf_sptr self) -> bool"""
        return _utils_swig.psd_cvf_sptr_start(self)

    def stop(self):
        """stop(psd_cvf_sptr self) -> bool"""
        return _utils_swig.psd_cvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(psd_cvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.psd_cvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(psd_cvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.psd_cvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(psd_cvf_sptr self) -> int"""
        return _utils_swig.psd_cvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(psd_cvf_sptr self, int m)"""
        return _utils_swig.psd_cvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(psd_cvf_sptr self)"""
        return _utils_swig.psd_cvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(psd_cvf_sptr self) -> bool"""
        return _utils_swig.psd_cvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(psd_cvf_sptr self, int m)"""
        return _utils_swig.psd_cvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(psd_cvf_sptr self) -> int"""
        return _utils_swig.psd_cvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(psd_cvf_sptr self, int i) -> long"""
        return _utils_swig.psd_cvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(psd_cvf_sptr self, long max_output_buffer)
        set_max_output_buffer(psd_cvf_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.psd_cvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(psd_cvf_sptr self, int i) -> long"""
        return _utils_swig.psd_cvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(psd_cvf_sptr self, long min_output_buffer)
        set_min_output_buffer(psd_cvf_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.psd_cvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(psd_cvf_sptr self, int which) -> float
        pc_input_buffers_full(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(psd_cvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(psd_cvf_sptr self, int which) -> float
        pc_input_buffers_full_var(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(psd_cvf_sptr self, int which) -> float
        pc_output_buffers_full(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(psd_cvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(psd_cvf_sptr self, int which) -> float
        pc_output_buffers_full_var(psd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.psd_cvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(psd_cvf_sptr self) -> float"""
        return _utils_swig.psd_cvf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(psd_cvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.psd_cvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(psd_cvf_sptr self)"""
        return _utils_swig.psd_cvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(psd_cvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.psd_cvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(psd_cvf_sptr self) -> int"""
        return _utils_swig.psd_cvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(psd_cvf_sptr self) -> int"""
        return _utils_swig.psd_cvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(psd_cvf_sptr self, int priority) -> int"""
        return _utils_swig.psd_cvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(psd_cvf_sptr self) -> std::string"""
        return _utils_swig.psd_cvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(psd_cvf_sptr self) -> std::string"""
        return _utils_swig.psd_cvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(psd_cvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.psd_cvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(psd_cvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.psd_cvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(psd_cvf_sptr self) -> long"""
        return _utils_swig.psd_cvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(psd_cvf_sptr self) -> basic_block_sptr"""
        return _utils_swig.psd_cvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(psd_cvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.psd_cvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(psd_cvf_sptr self) -> std::string"""
        return _utils_swig.psd_cvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(psd_cvf_sptr self, std::string name)"""
        return _utils_swig.psd_cvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(psd_cvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.psd_cvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(psd_cvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.psd_cvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(psd_cvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.psd_cvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(psd_cvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.psd_cvf_sptr_message_subscribers(self, *args, **kwargs)

psd_cvf_sptr_swigregister = _utils_swig.psd_cvf_sptr_swigregister
psd_cvf_sptr_swigregister(psd_cvf_sptr)

psd_cvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
psd_cvf = psd_cvf.make;

class pipe_sink(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::pipe_sink.

    To avoid accidental use of raw pointers, utils::pipe_sink's constructor is in a private implementation class. utils::pipe_sink::make is the public interface for creating new instances.

    Args:
        N : 
        filename : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N, char const * filename) -> pipe_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::pipe_sink.

        To avoid accidental use of raw pointers, utils::pipe_sink's constructor is in a private implementation class. utils::pipe_sink::make is the public interface for creating new instances.

        Args:
            N : 
            filename : 
        """
        return _utils_swig.pipe_sink_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_pipe_sink
    __del__ = lambda self : None;
pipe_sink_swigregister = _utils_swig.pipe_sink_swigregister
pipe_sink_swigregister(pipe_sink)

def pipe_sink_make(*args, **kwargs):
  """
    pipe_sink_make(int N, char const * filename) -> pipe_sink_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::pipe_sink.

    To avoid accidental use of raw pointers, utils::pipe_sink's constructor is in a private implementation class. utils::pipe_sink::make is the public interface for creating new instances.

    Args:
        N : 
        filename : 
    """
  return _utils_swig.pipe_sink_make(*args, **kwargs)

class pipe_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::pipe_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::pipe_sink)> self) -> pipe_sink_sptr
        __init__(boost::shared_ptr<(gr::utils::pipe_sink)> self, pipe_sink p) -> pipe_sink_sptr
        """
        this = _utils_swig.new_pipe_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pipe_sink_sptr self) -> pipe_sink"""
        return _utils_swig.pipe_sink_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_pipe_sink_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pipe_sink_sptr self, int N, char const * filename) -> pipe_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::pipe_sink.

        To avoid accidental use of raw pointers, utils::pipe_sink's constructor is in a private implementation class. utils::pipe_sink::make is the public interface for creating new instances.

        Args:
            N : 
            filename : 
        """
        return _utils_swig.pipe_sink_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pipe_sink_sptr self) -> unsigned int"""
        return _utils_swig.pipe_sink_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pipe_sink_sptr self, int which, int delay)
        declare_sample_delay(pipe_sink_sptr self, unsigned int delay)
        """
        return _utils_swig.pipe_sink_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pipe_sink_sptr self, int which) -> unsigned int"""
        return _utils_swig.pipe_sink_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pipe_sink_sptr self) -> int"""
        return _utils_swig.pipe_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pipe_sink_sptr self) -> double"""
        return _utils_swig.pipe_sink_sptr_relative_rate(self)

    def start(self):
        """start(pipe_sink_sptr self) -> bool"""
        return _utils_swig.pipe_sink_sptr_start(self)

    def stop(self):
        """stop(pipe_sink_sptr self) -> bool"""
        return _utils_swig.pipe_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pipe_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.pipe_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pipe_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.pipe_sink_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pipe_sink_sptr self) -> int"""
        return _utils_swig.pipe_sink_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pipe_sink_sptr self, int m)"""
        return _utils_swig.pipe_sink_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pipe_sink_sptr self)"""
        return _utils_swig.pipe_sink_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pipe_sink_sptr self) -> bool"""
        return _utils_swig.pipe_sink_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pipe_sink_sptr self, int m)"""
        return _utils_swig.pipe_sink_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pipe_sink_sptr self) -> int"""
        return _utils_swig.pipe_sink_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pipe_sink_sptr self, int i) -> long"""
        return _utils_swig.pipe_sink_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pipe_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(pipe_sink_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.pipe_sink_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pipe_sink_sptr self, int i) -> long"""
        return _utils_swig.pipe_sink_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pipe_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(pipe_sink_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.pipe_sink_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pipe_sink_sptr self, int which) -> float
        pc_input_buffers_full(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pipe_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pipe_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pipe_sink_sptr self, int which) -> float
        pc_output_buffers_full(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pipe_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pipe_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(pipe_sink_sptr self) -> pmt_vector_float
        """
        return _utils_swig.pipe_sink_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pipe_sink_sptr self) -> float"""
        return _utils_swig.pipe_sink_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pipe_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.pipe_sink_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pipe_sink_sptr self)"""
        return _utils_swig.pipe_sink_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pipe_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.pipe_sink_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pipe_sink_sptr self) -> int"""
        return _utils_swig.pipe_sink_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pipe_sink_sptr self) -> int"""
        return _utils_swig.pipe_sink_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pipe_sink_sptr self, int priority) -> int"""
        return _utils_swig.pipe_sink_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pipe_sink_sptr self) -> std::string"""
        return _utils_swig.pipe_sink_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pipe_sink_sptr self) -> std::string"""
        return _utils_swig.pipe_sink_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pipe_sink_sptr self) -> io_signature_sptr"""
        return _utils_swig.pipe_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pipe_sink_sptr self) -> io_signature_sptr"""
        return _utils_swig.pipe_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pipe_sink_sptr self) -> long"""
        return _utils_swig.pipe_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pipe_sink_sptr self) -> basic_block_sptr"""
        return _utils_swig.pipe_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pipe_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.pipe_sink_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pipe_sink_sptr self) -> std::string"""
        return _utils_swig.pipe_sink_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pipe_sink_sptr self, std::string name)"""
        return _utils_swig.pipe_sink_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pipe_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.pipe_sink_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pipe_sink_sptr self) -> swig_int_ptr"""
        return _utils_swig.pipe_sink_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pipe_sink_sptr self) -> swig_int_ptr"""
        return _utils_swig.pipe_sink_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pipe_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.pipe_sink_sptr_message_subscribers(self, *args, **kwargs)

pipe_sink_sptr_swigregister = _utils_swig.pipe_sink_sptr_swigregister
pipe_sink_sptr_swigregister(pipe_sink_sptr)

pipe_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pipe_sink = pipe_sink.make;

class shmem_write(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::shmem_write.

    To avoid accidental use of raw pointers, utils::shmem_write's constructor is in a private implementation class. utils::shmem_write::make is the public interface for creating new instances.

    Args:
        N : 
        num_channels : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N, int num_channels) -> shmem_write_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::shmem_write.

        To avoid accidental use of raw pointers, utils::shmem_write's constructor is in a private implementation class. utils::shmem_write::make is the public interface for creating new instances.

        Args:
            N : 
            num_channels : 
        """
        return _utils_swig.shmem_write_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_shmem_write
    __del__ = lambda self : None;
shmem_write_swigregister = _utils_swig.shmem_write_swigregister
shmem_write_swigregister(shmem_write)

def shmem_write_make(*args, **kwargs):
  """
    shmem_write_make(int N, int num_channels) -> shmem_write_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::shmem_write.

    To avoid accidental use of raw pointers, utils::shmem_write's constructor is in a private implementation class. utils::shmem_write::make is the public interface for creating new instances.

    Args:
        N : 
        num_channels : 
    """
  return _utils_swig.shmem_write_make(*args, **kwargs)

class shmem_write_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::shmem_write)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::shmem_write)> self) -> shmem_write_sptr
        __init__(boost::shared_ptr<(gr::utils::shmem_write)> self, shmem_write p) -> shmem_write_sptr
        """
        this = _utils_swig.new_shmem_write_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(shmem_write_sptr self) -> shmem_write"""
        return _utils_swig.shmem_write_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_shmem_write_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(shmem_write_sptr self, int N, int num_channels) -> shmem_write_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::shmem_write.

        To avoid accidental use of raw pointers, utils::shmem_write's constructor is in a private implementation class. utils::shmem_write::make is the public interface for creating new instances.

        Args:
            N : 
            num_channels : 
        """
        return _utils_swig.shmem_write_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(shmem_write_sptr self) -> unsigned int"""
        return _utils_swig.shmem_write_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(shmem_write_sptr self, int which, int delay)
        declare_sample_delay(shmem_write_sptr self, unsigned int delay)
        """
        return _utils_swig.shmem_write_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(shmem_write_sptr self, int which) -> unsigned int"""
        return _utils_swig.shmem_write_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(shmem_write_sptr self) -> int"""
        return _utils_swig.shmem_write_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(shmem_write_sptr self) -> double"""
        return _utils_swig.shmem_write_sptr_relative_rate(self)

    def start(self):
        """start(shmem_write_sptr self) -> bool"""
        return _utils_swig.shmem_write_sptr_start(self)

    def stop(self):
        """stop(shmem_write_sptr self) -> bool"""
        return _utils_swig.shmem_write_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(shmem_write_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.shmem_write_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(shmem_write_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.shmem_write_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(shmem_write_sptr self) -> int"""
        return _utils_swig.shmem_write_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(shmem_write_sptr self, int m)"""
        return _utils_swig.shmem_write_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(shmem_write_sptr self)"""
        return _utils_swig.shmem_write_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(shmem_write_sptr self) -> bool"""
        return _utils_swig.shmem_write_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(shmem_write_sptr self, int m)"""
        return _utils_swig.shmem_write_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(shmem_write_sptr self) -> int"""
        return _utils_swig.shmem_write_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(shmem_write_sptr self, int i) -> long"""
        return _utils_swig.shmem_write_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(shmem_write_sptr self, long max_output_buffer)
        set_max_output_buffer(shmem_write_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.shmem_write_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(shmem_write_sptr self, int i) -> long"""
        return _utils_swig.shmem_write_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(shmem_write_sptr self, long min_output_buffer)
        set_min_output_buffer(shmem_write_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.shmem_write_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(shmem_write_sptr self, int which) -> float
        pc_input_buffers_full(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(shmem_write_sptr self, int which) -> float
        pc_input_buffers_full_avg(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(shmem_write_sptr self, int which) -> float
        pc_input_buffers_full_var(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(shmem_write_sptr self, int which) -> float
        pc_output_buffers_full(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(shmem_write_sptr self, int which) -> float
        pc_output_buffers_full_avg(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(shmem_write_sptr self, int which) -> float
        pc_output_buffers_full_var(shmem_write_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_write_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(shmem_write_sptr self) -> float"""
        return _utils_swig.shmem_write_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(shmem_write_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.shmem_write_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(shmem_write_sptr self)"""
        return _utils_swig.shmem_write_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(shmem_write_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.shmem_write_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(shmem_write_sptr self) -> int"""
        return _utils_swig.shmem_write_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(shmem_write_sptr self) -> int"""
        return _utils_swig.shmem_write_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(shmem_write_sptr self, int priority) -> int"""
        return _utils_swig.shmem_write_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(shmem_write_sptr self) -> std::string"""
        return _utils_swig.shmem_write_sptr_name(self)

    def symbol_name(self):
        """symbol_name(shmem_write_sptr self) -> std::string"""
        return _utils_swig.shmem_write_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(shmem_write_sptr self) -> io_signature_sptr"""
        return _utils_swig.shmem_write_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(shmem_write_sptr self) -> io_signature_sptr"""
        return _utils_swig.shmem_write_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(shmem_write_sptr self) -> long"""
        return _utils_swig.shmem_write_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(shmem_write_sptr self) -> basic_block_sptr"""
        return _utils_swig.shmem_write_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(shmem_write_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.shmem_write_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(shmem_write_sptr self) -> std::string"""
        return _utils_swig.shmem_write_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(shmem_write_sptr self, std::string name)"""
        return _utils_swig.shmem_write_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(shmem_write_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.shmem_write_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(shmem_write_sptr self) -> swig_int_ptr"""
        return _utils_swig.shmem_write_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(shmem_write_sptr self) -> swig_int_ptr"""
        return _utils_swig.shmem_write_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(shmem_write_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.shmem_write_sptr_message_subscribers(self, *args, **kwargs)

shmem_write_sptr_swigregister = _utils_swig.shmem_write_sptr_swigregister
shmem_write_sptr_swigregister(shmem_write_sptr)

shmem_write_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
shmem_write = shmem_write.make;

class shmem_read(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::shmem_read.

    To avoid accidental use of raw pointers, utils::shmem_read's constructor is in a private implementation class. utils::shmem_read::make is the public interface for creating new instances.

    Args:
        N : 
        num_channels : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N, int num_channels) -> shmem_read_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::shmem_read.

        To avoid accidental use of raw pointers, utils::shmem_read's constructor is in a private implementation class. utils::shmem_read::make is the public interface for creating new instances.

        Args:
            N : 
            num_channels : 
        """
        return _utils_swig.shmem_read_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_shmem_read
    __del__ = lambda self : None;
shmem_read_swigregister = _utils_swig.shmem_read_swigregister
shmem_read_swigregister(shmem_read)

def shmem_read_make(*args, **kwargs):
  """
    shmem_read_make(int N, int num_channels) -> shmem_read_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::shmem_read.

    To avoid accidental use of raw pointers, utils::shmem_read's constructor is in a private implementation class. utils::shmem_read::make is the public interface for creating new instances.

    Args:
        N : 
        num_channels : 
    """
  return _utils_swig.shmem_read_make(*args, **kwargs)

class shmem_read_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::shmem_read)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::shmem_read)> self) -> shmem_read_sptr
        __init__(boost::shared_ptr<(gr::utils::shmem_read)> self, shmem_read p) -> shmem_read_sptr
        """
        this = _utils_swig.new_shmem_read_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(shmem_read_sptr self) -> shmem_read"""
        return _utils_swig.shmem_read_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_shmem_read_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(shmem_read_sptr self, int N, int num_channels) -> shmem_read_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::shmem_read.

        To avoid accidental use of raw pointers, utils::shmem_read's constructor is in a private implementation class. utils::shmem_read::make is the public interface for creating new instances.

        Args:
            N : 
            num_channels : 
        """
        return _utils_swig.shmem_read_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(shmem_read_sptr self) -> unsigned int"""
        return _utils_swig.shmem_read_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(shmem_read_sptr self, int which, int delay)
        declare_sample_delay(shmem_read_sptr self, unsigned int delay)
        """
        return _utils_swig.shmem_read_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(shmem_read_sptr self, int which) -> unsigned int"""
        return _utils_swig.shmem_read_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(shmem_read_sptr self) -> int"""
        return _utils_swig.shmem_read_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(shmem_read_sptr self) -> double"""
        return _utils_swig.shmem_read_sptr_relative_rate(self)

    def start(self):
        """start(shmem_read_sptr self) -> bool"""
        return _utils_swig.shmem_read_sptr_start(self)

    def stop(self):
        """stop(shmem_read_sptr self) -> bool"""
        return _utils_swig.shmem_read_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(shmem_read_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.shmem_read_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(shmem_read_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.shmem_read_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(shmem_read_sptr self) -> int"""
        return _utils_swig.shmem_read_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(shmem_read_sptr self, int m)"""
        return _utils_swig.shmem_read_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(shmem_read_sptr self)"""
        return _utils_swig.shmem_read_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(shmem_read_sptr self) -> bool"""
        return _utils_swig.shmem_read_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(shmem_read_sptr self, int m)"""
        return _utils_swig.shmem_read_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(shmem_read_sptr self) -> int"""
        return _utils_swig.shmem_read_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(shmem_read_sptr self, int i) -> long"""
        return _utils_swig.shmem_read_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(shmem_read_sptr self, long max_output_buffer)
        set_max_output_buffer(shmem_read_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.shmem_read_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(shmem_read_sptr self, int i) -> long"""
        return _utils_swig.shmem_read_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(shmem_read_sptr self, long min_output_buffer)
        set_min_output_buffer(shmem_read_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.shmem_read_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(shmem_read_sptr self, int which) -> float
        pc_input_buffers_full(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(shmem_read_sptr self, int which) -> float
        pc_input_buffers_full_avg(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(shmem_read_sptr self, int which) -> float
        pc_input_buffers_full_var(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(shmem_read_sptr self, int which) -> float
        pc_output_buffers_full(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(shmem_read_sptr self, int which) -> float
        pc_output_buffers_full_avg(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(shmem_read_sptr self, int which) -> float
        pc_output_buffers_full_var(shmem_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.shmem_read_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(shmem_read_sptr self) -> float"""
        return _utils_swig.shmem_read_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(shmem_read_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.shmem_read_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(shmem_read_sptr self)"""
        return _utils_swig.shmem_read_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(shmem_read_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.shmem_read_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(shmem_read_sptr self) -> int"""
        return _utils_swig.shmem_read_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(shmem_read_sptr self) -> int"""
        return _utils_swig.shmem_read_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(shmem_read_sptr self, int priority) -> int"""
        return _utils_swig.shmem_read_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(shmem_read_sptr self) -> std::string"""
        return _utils_swig.shmem_read_sptr_name(self)

    def symbol_name(self):
        """symbol_name(shmem_read_sptr self) -> std::string"""
        return _utils_swig.shmem_read_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(shmem_read_sptr self) -> io_signature_sptr"""
        return _utils_swig.shmem_read_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(shmem_read_sptr self) -> io_signature_sptr"""
        return _utils_swig.shmem_read_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(shmem_read_sptr self) -> long"""
        return _utils_swig.shmem_read_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(shmem_read_sptr self) -> basic_block_sptr"""
        return _utils_swig.shmem_read_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(shmem_read_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.shmem_read_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(shmem_read_sptr self) -> std::string"""
        return _utils_swig.shmem_read_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(shmem_read_sptr self, std::string name)"""
        return _utils_swig.shmem_read_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(shmem_read_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.shmem_read_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(shmem_read_sptr self) -> swig_int_ptr"""
        return _utils_swig.shmem_read_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(shmem_read_sptr self) -> swig_int_ptr"""
        return _utils_swig.shmem_read_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(shmem_read_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.shmem_read_sptr_message_subscribers(self, *args, **kwargs)

shmem_read_sptr_swigregister = _utils_swig.shmem_read_sptr_swigregister
shmem_read_sptr_swigregister(shmem_read_sptr)

shmem_read_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
shmem_read = shmem_read.make;

class reader(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::reader.

    To avoid accidental use of raw pointers, utils::reader's constructor is in a private implementation class. utils::reader::make is the public interface for creating new instances.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> reader_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::reader.

        To avoid accidental use of raw pointers, utils::reader's constructor is in a private implementation class. utils::reader::make is the public interface for creating new instances.
        """
        return _utils_swig.reader_make()

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_reader
    __del__ = lambda self : None;
reader_swigregister = _utils_swig.reader_swigregister
reader_swigregister(reader)

def reader_make():
  """
    reader_make() -> reader_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::reader.

    To avoid accidental use of raw pointers, utils::reader's constructor is in a private implementation class. utils::reader::make is the public interface for creating new instances.
    """
  return _utils_swig.reader_make()

class reader_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::reader)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::reader)> self) -> reader_sptr
        __init__(boost::shared_ptr<(gr::utils::reader)> self, reader p) -> reader_sptr
        """
        this = _utils_swig.new_reader_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(reader_sptr self) -> reader"""
        return _utils_swig.reader_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_reader_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(reader_sptr self) -> reader_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::reader.

        To avoid accidental use of raw pointers, utils::reader's constructor is in a private implementation class. utils::reader::make is the public interface for creating new instances.
        """
        return _utils_swig.reader_sptr_make(self)

    def history(self):
        """history(reader_sptr self) -> unsigned int"""
        return _utils_swig.reader_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(reader_sptr self, int which, int delay)
        declare_sample_delay(reader_sptr self, unsigned int delay)
        """
        return _utils_swig.reader_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(reader_sptr self, int which) -> unsigned int"""
        return _utils_swig.reader_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(reader_sptr self) -> int"""
        return _utils_swig.reader_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(reader_sptr self) -> double"""
        return _utils_swig.reader_sptr_relative_rate(self)

    def start(self):
        """start(reader_sptr self) -> bool"""
        return _utils_swig.reader_sptr_start(self)

    def stop(self):
        """stop(reader_sptr self) -> bool"""
        return _utils_swig.reader_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(reader_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.reader_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(reader_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.reader_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(reader_sptr self) -> int"""
        return _utils_swig.reader_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(reader_sptr self, int m)"""
        return _utils_swig.reader_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(reader_sptr self)"""
        return _utils_swig.reader_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(reader_sptr self) -> bool"""
        return _utils_swig.reader_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(reader_sptr self, int m)"""
        return _utils_swig.reader_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(reader_sptr self) -> int"""
        return _utils_swig.reader_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(reader_sptr self, int i) -> long"""
        return _utils_swig.reader_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(reader_sptr self, long max_output_buffer)
        set_max_output_buffer(reader_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.reader_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(reader_sptr self, int i) -> long"""
        return _utils_swig.reader_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(reader_sptr self, long min_output_buffer)
        set_min_output_buffer(reader_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.reader_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(reader_sptr self, int which) -> float
        pc_input_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(reader_sptr self, int which) -> float
        pc_input_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(reader_sptr self, int which) -> float
        pc_input_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(reader_sptr self, int which) -> float
        pc_output_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(reader_sptr self, int which) -> float
        pc_output_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(reader_sptr self, int which) -> float
        pc_output_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.reader_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(reader_sptr self) -> float"""
        return _utils_swig.reader_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(reader_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.reader_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(reader_sptr self)"""
        return _utils_swig.reader_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(reader_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.reader_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(reader_sptr self) -> int"""
        return _utils_swig.reader_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(reader_sptr self) -> int"""
        return _utils_swig.reader_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(reader_sptr self, int priority) -> int"""
        return _utils_swig.reader_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(reader_sptr self) -> std::string"""
        return _utils_swig.reader_sptr_name(self)

    def symbol_name(self):
        """symbol_name(reader_sptr self) -> std::string"""
        return _utils_swig.reader_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(reader_sptr self) -> io_signature_sptr"""
        return _utils_swig.reader_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(reader_sptr self) -> io_signature_sptr"""
        return _utils_swig.reader_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(reader_sptr self) -> long"""
        return _utils_swig.reader_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(reader_sptr self) -> basic_block_sptr"""
        return _utils_swig.reader_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(reader_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.reader_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(reader_sptr self) -> std::string"""
        return _utils_swig.reader_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(reader_sptr self, std::string name)"""
        return _utils_swig.reader_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(reader_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.reader_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(reader_sptr self) -> swig_int_ptr"""
        return _utils_swig.reader_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(reader_sptr self) -> swig_int_ptr"""
        return _utils_swig.reader_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(reader_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.reader_sptr_message_subscribers(self, *args, **kwargs)

reader_sptr_swigregister = _utils_swig.reader_sptr_swigregister
reader_sptr_swigregister(reader_sptr)

reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
reader = reader.make;

class gps_reader(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::gps_reader.

    To avoid accidental use of raw pointers, utils::gps_reader's constructor is in a private implementation class. utils::gps_reader::make is the public interface for creating new instances.

    Args:
        port : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int port) -> gps_reader_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::gps_reader.

        To avoid accidental use of raw pointers, utils::gps_reader's constructor is in a private implementation class. utils::gps_reader::make is the public interface for creating new instances.

        Args:
            port : 
        """
        return _utils_swig.gps_reader_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_gps_reader
    __del__ = lambda self : None;
gps_reader_swigregister = _utils_swig.gps_reader_swigregister
gps_reader_swigregister(gps_reader)

def gps_reader_make(*args, **kwargs):
  """
    gps_reader_make(int port) -> gps_reader_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::gps_reader.

    To avoid accidental use of raw pointers, utils::gps_reader's constructor is in a private implementation class. utils::gps_reader::make is the public interface for creating new instances.

    Args:
        port : 
    """
  return _utils_swig.gps_reader_make(*args, **kwargs)

class gps_reader_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::gps_reader)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::gps_reader)> self) -> gps_reader_sptr
        __init__(boost::shared_ptr<(gr::utils::gps_reader)> self, gps_reader p) -> gps_reader_sptr
        """
        this = _utils_swig.new_gps_reader_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(gps_reader_sptr self) -> gps_reader"""
        return _utils_swig.gps_reader_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_gps_reader_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(gps_reader_sptr self, int port) -> gps_reader_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::gps_reader.

        To avoid accidental use of raw pointers, utils::gps_reader's constructor is in a private implementation class. utils::gps_reader::make is the public interface for creating new instances.

        Args:
            port : 
        """
        return _utils_swig.gps_reader_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(gps_reader_sptr self) -> unsigned int"""
        return _utils_swig.gps_reader_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gps_reader_sptr self, int which, int delay)
        declare_sample_delay(gps_reader_sptr self, unsigned int delay)
        """
        return _utils_swig.gps_reader_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(gps_reader_sptr self, int which) -> unsigned int"""
        return _utils_swig.gps_reader_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(gps_reader_sptr self) -> int"""
        return _utils_swig.gps_reader_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(gps_reader_sptr self) -> double"""
        return _utils_swig.gps_reader_sptr_relative_rate(self)

    def start(self):
        """start(gps_reader_sptr self) -> bool"""
        return _utils_swig.gps_reader_sptr_start(self)

    def stop(self):
        """stop(gps_reader_sptr self) -> bool"""
        return _utils_swig.gps_reader_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(gps_reader_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.gps_reader_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(gps_reader_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.gps_reader_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(gps_reader_sptr self) -> int"""
        return _utils_swig.gps_reader_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(gps_reader_sptr self, int m)"""
        return _utils_swig.gps_reader_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gps_reader_sptr self)"""
        return _utils_swig.gps_reader_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gps_reader_sptr self) -> bool"""
        return _utils_swig.gps_reader_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(gps_reader_sptr self, int m)"""
        return _utils_swig.gps_reader_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(gps_reader_sptr self) -> int"""
        return _utils_swig.gps_reader_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(gps_reader_sptr self, int i) -> long"""
        return _utils_swig.gps_reader_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gps_reader_sptr self, long max_output_buffer)
        set_max_output_buffer(gps_reader_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.gps_reader_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(gps_reader_sptr self, int i) -> long"""
        return _utils_swig.gps_reader_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gps_reader_sptr self, long min_output_buffer)
        set_min_output_buffer(gps_reader_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.gps_reader_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gps_reader_sptr self, int which) -> float
        pc_input_buffers_full(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gps_reader_sptr self, int which) -> float
        pc_input_buffers_full_avg(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gps_reader_sptr self, int which) -> float
        pc_input_buffers_full_var(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gps_reader_sptr self, int which) -> float
        pc_output_buffers_full(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gps_reader_sptr self, int which) -> float
        pc_output_buffers_full_avg(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gps_reader_sptr self, int which) -> float
        pc_output_buffers_full_var(gps_reader_sptr self) -> pmt_vector_float
        """
        return _utils_swig.gps_reader_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(gps_reader_sptr self) -> float"""
        return _utils_swig.gps_reader_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(gps_reader_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.gps_reader_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(gps_reader_sptr self)"""
        return _utils_swig.gps_reader_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(gps_reader_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.gps_reader_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(gps_reader_sptr self) -> int"""
        return _utils_swig.gps_reader_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(gps_reader_sptr self) -> int"""
        return _utils_swig.gps_reader_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(gps_reader_sptr self, int priority) -> int"""
        return _utils_swig.gps_reader_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(gps_reader_sptr self) -> std::string"""
        return _utils_swig.gps_reader_sptr_name(self)

    def symbol_name(self):
        """symbol_name(gps_reader_sptr self) -> std::string"""
        return _utils_swig.gps_reader_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(gps_reader_sptr self) -> io_signature_sptr"""
        return _utils_swig.gps_reader_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(gps_reader_sptr self) -> io_signature_sptr"""
        return _utils_swig.gps_reader_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(gps_reader_sptr self) -> long"""
        return _utils_swig.gps_reader_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(gps_reader_sptr self) -> basic_block_sptr"""
        return _utils_swig.gps_reader_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(gps_reader_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.gps_reader_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(gps_reader_sptr self) -> std::string"""
        return _utils_swig.gps_reader_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(gps_reader_sptr self, std::string name)"""
        return _utils_swig.gps_reader_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(gps_reader_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.gps_reader_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(gps_reader_sptr self) -> swig_int_ptr"""
        return _utils_swig.gps_reader_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(gps_reader_sptr self) -> swig_int_ptr"""
        return _utils_swig.gps_reader_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(gps_reader_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.gps_reader_sptr_message_subscribers(self, *args, **kwargs)

gps_reader_sptr_swigregister = _utils_swig.gps_reader_sptr_swigregister
gps_reader_sptr_swigregister(gps_reader_sptr)

gps_reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gps_reader = gps_reader.make;

class fbpsd_cvf(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::fbpsd_cvf.

    To avoid accidental use of raw pointers, utils::fbpsd_cvf's constructor is in a private implementation class. utils::fbpsd_cvf::make is the public interface for creating new instances.

    Args:
        fft_len : 
        samp_rate : 
        window_type : 
        alpha : 
        num_channels : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fft_len, double samp_rate, int window_type, float alpha, int num_channels) -> fbpsd_cvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::fbpsd_cvf.

        To avoid accidental use of raw pointers, utils::fbpsd_cvf's constructor is in a private implementation class. utils::fbpsd_cvf::make is the public interface for creating new instances.

        Args:
            fft_len : 
            samp_rate : 
            window_type : 
            alpha : 
            num_channels : 
        """
        return _utils_swig.fbpsd_cvf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(fbpsd_cvf self, double d_samp_rate)"""
        return _utils_swig.fbpsd_cvf_set_samp_rate(self, *args, **kwargs)

    def set_fft_len(self, *args, **kwargs):
        """set_fft_len(fbpsd_cvf self, int fft_len)"""
        return _utils_swig.fbpsd_cvf_set_fft_len(self, *args, **kwargs)

    def set_window_type(self, *args, **kwargs):
        """set_window_type(fbpsd_cvf self, int d_window)"""
        return _utils_swig.fbpsd_cvf_set_window_type(self, *args, **kwargs)

    def set_average(self, *args, **kwargs):
        """set_average(fbpsd_cvf self, float d_average)"""
        return _utils_swig.fbpsd_cvf_set_average(self, *args, **kwargs)

    __swig_destroy__ = _utils_swig.delete_fbpsd_cvf
    __del__ = lambda self : None;
fbpsd_cvf_swigregister = _utils_swig.fbpsd_cvf_swigregister
fbpsd_cvf_swigregister(fbpsd_cvf)

def fbpsd_cvf_make(*args, **kwargs):
  """
    fbpsd_cvf_make(int fft_len, double samp_rate, int window_type, float alpha, int num_channels) -> fbpsd_cvf_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::fbpsd_cvf.

    To avoid accidental use of raw pointers, utils::fbpsd_cvf's constructor is in a private implementation class. utils::fbpsd_cvf::make is the public interface for creating new instances.

    Args:
        fft_len : 
        samp_rate : 
        window_type : 
        alpha : 
        num_channels : 
    """
  return _utils_swig.fbpsd_cvf_make(*args, **kwargs)

class fbpsd_cvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::fbpsd_cvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::fbpsd_cvf)> self) -> fbpsd_cvf_sptr
        __init__(boost::shared_ptr<(gr::utils::fbpsd_cvf)> self, fbpsd_cvf p) -> fbpsd_cvf_sptr
        """
        this = _utils_swig.new_fbpsd_cvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(fbpsd_cvf_sptr self) -> fbpsd_cvf"""
        return _utils_swig.fbpsd_cvf_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_fbpsd_cvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(fbpsd_cvf_sptr self, int fft_len, double samp_rate, int window_type, float alpha, int num_channels) -> fbpsd_cvf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::fbpsd_cvf.

        To avoid accidental use of raw pointers, utils::fbpsd_cvf's constructor is in a private implementation class. utils::fbpsd_cvf::make is the public interface for creating new instances.

        Args:
            fft_len : 
            samp_rate : 
            window_type : 
            alpha : 
            num_channels : 
        """
        return _utils_swig.fbpsd_cvf_sptr_make(self, *args, **kwargs)

    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(fbpsd_cvf_sptr self, double d_samp_rate)"""
        return _utils_swig.fbpsd_cvf_sptr_set_samp_rate(self, *args, **kwargs)

    def set_fft_len(self, *args, **kwargs):
        """set_fft_len(fbpsd_cvf_sptr self, int fft_len)"""
        return _utils_swig.fbpsd_cvf_sptr_set_fft_len(self, *args, **kwargs)

    def set_window_type(self, *args, **kwargs):
        """set_window_type(fbpsd_cvf_sptr self, int d_window)"""
        return _utils_swig.fbpsd_cvf_sptr_set_window_type(self, *args, **kwargs)

    def set_average(self, *args, **kwargs):
        """set_average(fbpsd_cvf_sptr self, float d_average)"""
        return _utils_swig.fbpsd_cvf_sptr_set_average(self, *args, **kwargs)

    def history(self):
        """history(fbpsd_cvf_sptr self) -> unsigned int"""
        return _utils_swig.fbpsd_cvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fbpsd_cvf_sptr self, int which, int delay)
        declare_sample_delay(fbpsd_cvf_sptr self, unsigned int delay)
        """
        return _utils_swig.fbpsd_cvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(fbpsd_cvf_sptr self, int which) -> unsigned int"""
        return _utils_swig.fbpsd_cvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(fbpsd_cvf_sptr self) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(fbpsd_cvf_sptr self) -> double"""
        return _utils_swig.fbpsd_cvf_sptr_relative_rate(self)

    def start(self):
        """start(fbpsd_cvf_sptr self) -> bool"""
        return _utils_swig.fbpsd_cvf_sptr_start(self)

    def stop(self):
        """stop(fbpsd_cvf_sptr self) -> bool"""
        return _utils_swig.fbpsd_cvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(fbpsd_cvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.fbpsd_cvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(fbpsd_cvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.fbpsd_cvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(fbpsd_cvf_sptr self) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(fbpsd_cvf_sptr self, int m)"""
        return _utils_swig.fbpsd_cvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fbpsd_cvf_sptr self)"""
        return _utils_swig.fbpsd_cvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fbpsd_cvf_sptr self) -> bool"""
        return _utils_swig.fbpsd_cvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(fbpsd_cvf_sptr self, int m)"""
        return _utils_swig.fbpsd_cvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(fbpsd_cvf_sptr self) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(fbpsd_cvf_sptr self, int i) -> long"""
        return _utils_swig.fbpsd_cvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fbpsd_cvf_sptr self, long max_output_buffer)
        set_max_output_buffer(fbpsd_cvf_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.fbpsd_cvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(fbpsd_cvf_sptr self, int i) -> long"""
        return _utils_swig.fbpsd_cvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fbpsd_cvf_sptr self, long min_output_buffer)
        set_min_output_buffer(fbpsd_cvf_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.fbpsd_cvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fbpsd_cvf_sptr self, int which) -> float
        pc_input_buffers_full(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fbpsd_cvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fbpsd_cvf_sptr self, int which) -> float
        pc_input_buffers_full_var(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fbpsd_cvf_sptr self, int which) -> float
        pc_output_buffers_full(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fbpsd_cvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fbpsd_cvf_sptr self, int which) -> float
        pc_output_buffers_full_var(fbpsd_cvf_sptr self) -> pmt_vector_float
        """
        return _utils_swig.fbpsd_cvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(fbpsd_cvf_sptr self) -> float"""
        return _utils_swig.fbpsd_cvf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(fbpsd_cvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.fbpsd_cvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(fbpsd_cvf_sptr self)"""
        return _utils_swig.fbpsd_cvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(fbpsd_cvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.fbpsd_cvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(fbpsd_cvf_sptr self) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(fbpsd_cvf_sptr self) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(fbpsd_cvf_sptr self, int priority) -> int"""
        return _utils_swig.fbpsd_cvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(fbpsd_cvf_sptr self) -> std::string"""
        return _utils_swig.fbpsd_cvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(fbpsd_cvf_sptr self) -> std::string"""
        return _utils_swig.fbpsd_cvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(fbpsd_cvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.fbpsd_cvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(fbpsd_cvf_sptr self) -> io_signature_sptr"""
        return _utils_swig.fbpsd_cvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(fbpsd_cvf_sptr self) -> long"""
        return _utils_swig.fbpsd_cvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(fbpsd_cvf_sptr self) -> basic_block_sptr"""
        return _utils_swig.fbpsd_cvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(fbpsd_cvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.fbpsd_cvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(fbpsd_cvf_sptr self) -> std::string"""
        return _utils_swig.fbpsd_cvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(fbpsd_cvf_sptr self, std::string name)"""
        return _utils_swig.fbpsd_cvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(fbpsd_cvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.fbpsd_cvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(fbpsd_cvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.fbpsd_cvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(fbpsd_cvf_sptr self) -> swig_int_ptr"""
        return _utils_swig.fbpsd_cvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(fbpsd_cvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.fbpsd_cvf_sptr_message_subscribers(self, *args, **kwargs)

fbpsd_cvf_sptr_swigregister = _utils_swig.fbpsd_cvf_sptr_swigregister
fbpsd_cvf_sptr_swigregister(fbpsd_cvf_sptr)

fbpsd_cvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fbpsd_cvf = fbpsd_cvf.make;

class cstates_read(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::cstates_read.

    To avoid accidental use of raw pointers, utils::cstates_read's constructor is in a private implementation class. utils::cstates_read::make is the public interface for creating new instances.

    Args:
        num_channels : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int num_channels) -> cstates_read_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::cstates_read.

        To avoid accidental use of raw pointers, utils::cstates_read's constructor is in a private implementation class. utils::cstates_read::make is the public interface for creating new instances.

        Args:
            num_channels : 
        """
        return _utils_swig.cstates_read_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_cstates_read
    __del__ = lambda self : None;
cstates_read_swigregister = _utils_swig.cstates_read_swigregister
cstates_read_swigregister(cstates_read)

def cstates_read_make(*args, **kwargs):
  """
    cstates_read_make(int num_channels) -> cstates_read_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::cstates_read.

    To avoid accidental use of raw pointers, utils::cstates_read's constructor is in a private implementation class. utils::cstates_read::make is the public interface for creating new instances.

    Args:
        num_channels : 
    """
  return _utils_swig.cstates_read_make(*args, **kwargs)

class cstates_read_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::cstates_read)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::cstates_read)> self) -> cstates_read_sptr
        __init__(boost::shared_ptr<(gr::utils::cstates_read)> self, cstates_read p) -> cstates_read_sptr
        """
        this = _utils_swig.new_cstates_read_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cstates_read_sptr self) -> cstates_read"""
        return _utils_swig.cstates_read_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_cstates_read_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(cstates_read_sptr self, int num_channels) -> cstates_read_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::cstates_read.

        To avoid accidental use of raw pointers, utils::cstates_read's constructor is in a private implementation class. utils::cstates_read::make is the public interface for creating new instances.

        Args:
            num_channels : 
        """
        return _utils_swig.cstates_read_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(cstates_read_sptr self) -> unsigned int"""
        return _utils_swig.cstates_read_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cstates_read_sptr self, int which, int delay)
        declare_sample_delay(cstates_read_sptr self, unsigned int delay)
        """
        return _utils_swig.cstates_read_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cstates_read_sptr self, int which) -> unsigned int"""
        return _utils_swig.cstates_read_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cstates_read_sptr self) -> int"""
        return _utils_swig.cstates_read_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cstates_read_sptr self) -> double"""
        return _utils_swig.cstates_read_sptr_relative_rate(self)

    def start(self):
        """start(cstates_read_sptr self) -> bool"""
        return _utils_swig.cstates_read_sptr_start(self)

    def stop(self):
        """stop(cstates_read_sptr self) -> bool"""
        return _utils_swig.cstates_read_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cstates_read_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.cstates_read_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cstates_read_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.cstates_read_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cstates_read_sptr self) -> int"""
        return _utils_swig.cstates_read_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cstates_read_sptr self, int m)"""
        return _utils_swig.cstates_read_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cstates_read_sptr self)"""
        return _utils_swig.cstates_read_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cstates_read_sptr self) -> bool"""
        return _utils_swig.cstates_read_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cstates_read_sptr self, int m)"""
        return _utils_swig.cstates_read_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cstates_read_sptr self) -> int"""
        return _utils_swig.cstates_read_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cstates_read_sptr self, int i) -> long"""
        return _utils_swig.cstates_read_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cstates_read_sptr self, long max_output_buffer)
        set_max_output_buffer(cstates_read_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.cstates_read_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cstates_read_sptr self, int i) -> long"""
        return _utils_swig.cstates_read_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cstates_read_sptr self, long min_output_buffer)
        set_min_output_buffer(cstates_read_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.cstates_read_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cstates_read_sptr self, int which) -> float
        pc_input_buffers_full(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cstates_read_sptr self, int which) -> float
        pc_input_buffers_full_avg(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cstates_read_sptr self, int which) -> float
        pc_input_buffers_full_var(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cstates_read_sptr self, int which) -> float
        pc_output_buffers_full(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cstates_read_sptr self, int which) -> float
        pc_output_buffers_full_avg(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cstates_read_sptr self, int which) -> float
        pc_output_buffers_full_var(cstates_read_sptr self) -> pmt_vector_float
        """
        return _utils_swig.cstates_read_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(cstates_read_sptr self) -> float"""
        return _utils_swig.cstates_read_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cstates_read_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.cstates_read_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cstates_read_sptr self)"""
        return _utils_swig.cstates_read_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cstates_read_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.cstates_read_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cstates_read_sptr self) -> int"""
        return _utils_swig.cstates_read_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cstates_read_sptr self) -> int"""
        return _utils_swig.cstates_read_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cstates_read_sptr self, int priority) -> int"""
        return _utils_swig.cstates_read_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cstates_read_sptr self) -> std::string"""
        return _utils_swig.cstates_read_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cstates_read_sptr self) -> std::string"""
        return _utils_swig.cstates_read_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cstates_read_sptr self) -> io_signature_sptr"""
        return _utils_swig.cstates_read_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cstates_read_sptr self) -> io_signature_sptr"""
        return _utils_swig.cstates_read_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cstates_read_sptr self) -> long"""
        return _utils_swig.cstates_read_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cstates_read_sptr self) -> basic_block_sptr"""
        return _utils_swig.cstates_read_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cstates_read_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.cstates_read_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cstates_read_sptr self) -> std::string"""
        return _utils_swig.cstates_read_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cstates_read_sptr self, std::string name)"""
        return _utils_swig.cstates_read_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cstates_read_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.cstates_read_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cstates_read_sptr self) -> swig_int_ptr"""
        return _utils_swig.cstates_read_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cstates_read_sptr self) -> swig_int_ptr"""
        return _utils_swig.cstates_read_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cstates_read_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.cstates_read_sptr_message_subscribers(self, *args, **kwargs)

cstates_read_sptr_swigregister = _utils_swig.cstates_read_sptr_swigregister
cstates_read_sptr_swigregister(cstates_read_sptr)

cstates_read_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cstates_read = cstates_read.make;

class liquid_buffer(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::liquid_buffer.

    To avoid accidental use of raw pointers, utils::liquid_buffer's constructor is in a private implementation class. utils::liquid_buffer::make is the public interface for creating new instances.

    Args:
        N : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N) -> liquid_buffer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::liquid_buffer.

        To avoid accidental use of raw pointers, utils::liquid_buffer's constructor is in a private implementation class. utils::liquid_buffer::make is the public interface for creating new instances.

        Args:
            N : 
        """
        return _utils_swig.liquid_buffer_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_liquid_buffer
    __del__ = lambda self : None;
liquid_buffer_swigregister = _utils_swig.liquid_buffer_swigregister
liquid_buffer_swigregister(liquid_buffer)

def liquid_buffer_make(*args, **kwargs):
  """
    liquid_buffer_make(int N) -> liquid_buffer_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::liquid_buffer.

    To avoid accidental use of raw pointers, utils::liquid_buffer's constructor is in a private implementation class. utils::liquid_buffer::make is the public interface for creating new instances.

    Args:
        N : 
    """
  return _utils_swig.liquid_buffer_make(*args, **kwargs)

class liquid_buffer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::liquid_buffer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::liquid_buffer)> self) -> liquid_buffer_sptr
        __init__(boost::shared_ptr<(gr::utils::liquid_buffer)> self, liquid_buffer p) -> liquid_buffer_sptr
        """
        this = _utils_swig.new_liquid_buffer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(liquid_buffer_sptr self) -> liquid_buffer"""
        return _utils_swig.liquid_buffer_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_liquid_buffer_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(liquid_buffer_sptr self, int N) -> liquid_buffer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::liquid_buffer.

        To avoid accidental use of raw pointers, utils::liquid_buffer's constructor is in a private implementation class. utils::liquid_buffer::make is the public interface for creating new instances.

        Args:
            N : 
        """
        return _utils_swig.liquid_buffer_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(liquid_buffer_sptr self) -> unsigned int"""
        return _utils_swig.liquid_buffer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(liquid_buffer_sptr self, int which, int delay)
        declare_sample_delay(liquid_buffer_sptr self, unsigned int delay)
        """
        return _utils_swig.liquid_buffer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(liquid_buffer_sptr self, int which) -> unsigned int"""
        return _utils_swig.liquid_buffer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(liquid_buffer_sptr self) -> int"""
        return _utils_swig.liquid_buffer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(liquid_buffer_sptr self) -> double"""
        return _utils_swig.liquid_buffer_sptr_relative_rate(self)

    def start(self):
        """start(liquid_buffer_sptr self) -> bool"""
        return _utils_swig.liquid_buffer_sptr_start(self)

    def stop(self):
        """stop(liquid_buffer_sptr self) -> bool"""
        return _utils_swig.liquid_buffer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(liquid_buffer_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.liquid_buffer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(liquid_buffer_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.liquid_buffer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(liquid_buffer_sptr self) -> int"""
        return _utils_swig.liquid_buffer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(liquid_buffer_sptr self, int m)"""
        return _utils_swig.liquid_buffer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(liquid_buffer_sptr self)"""
        return _utils_swig.liquid_buffer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(liquid_buffer_sptr self) -> bool"""
        return _utils_swig.liquid_buffer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(liquid_buffer_sptr self, int m)"""
        return _utils_swig.liquid_buffer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(liquid_buffer_sptr self) -> int"""
        return _utils_swig.liquid_buffer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(liquid_buffer_sptr self, int i) -> long"""
        return _utils_swig.liquid_buffer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(liquid_buffer_sptr self, long max_output_buffer)
        set_max_output_buffer(liquid_buffer_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.liquid_buffer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(liquid_buffer_sptr self, int i) -> long"""
        return _utils_swig.liquid_buffer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(liquid_buffer_sptr self, long min_output_buffer)
        set_min_output_buffer(liquid_buffer_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.liquid_buffer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(liquid_buffer_sptr self, int which) -> float
        pc_input_buffers_full(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(liquid_buffer_sptr self, int which) -> float
        pc_input_buffers_full_avg(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(liquid_buffer_sptr self, int which) -> float
        pc_input_buffers_full_var(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(liquid_buffer_sptr self, int which) -> float
        pc_output_buffers_full(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(liquid_buffer_sptr self, int which) -> float
        pc_output_buffers_full_avg(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(liquid_buffer_sptr self, int which) -> float
        pc_output_buffers_full_var(liquid_buffer_sptr self) -> pmt_vector_float
        """
        return _utils_swig.liquid_buffer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(liquid_buffer_sptr self) -> float"""
        return _utils_swig.liquid_buffer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(liquid_buffer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.liquid_buffer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(liquid_buffer_sptr self)"""
        return _utils_swig.liquid_buffer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(liquid_buffer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.liquid_buffer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(liquid_buffer_sptr self) -> int"""
        return _utils_swig.liquid_buffer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(liquid_buffer_sptr self) -> int"""
        return _utils_swig.liquid_buffer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(liquid_buffer_sptr self, int priority) -> int"""
        return _utils_swig.liquid_buffer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(liquid_buffer_sptr self) -> std::string"""
        return _utils_swig.liquid_buffer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(liquid_buffer_sptr self) -> std::string"""
        return _utils_swig.liquid_buffer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(liquid_buffer_sptr self) -> io_signature_sptr"""
        return _utils_swig.liquid_buffer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(liquid_buffer_sptr self) -> io_signature_sptr"""
        return _utils_swig.liquid_buffer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(liquid_buffer_sptr self) -> long"""
        return _utils_swig.liquid_buffer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(liquid_buffer_sptr self) -> basic_block_sptr"""
        return _utils_swig.liquid_buffer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(liquid_buffer_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.liquid_buffer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(liquid_buffer_sptr self) -> std::string"""
        return _utils_swig.liquid_buffer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(liquid_buffer_sptr self, std::string name)"""
        return _utils_swig.liquid_buffer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(liquid_buffer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.liquid_buffer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(liquid_buffer_sptr self) -> swig_int_ptr"""
        return _utils_swig.liquid_buffer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(liquid_buffer_sptr self) -> swig_int_ptr"""
        return _utils_swig.liquid_buffer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(liquid_buffer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.liquid_buffer_sptr_message_subscribers(self, *args, **kwargs)

liquid_buffer_sptr_swigregister = _utils_swig.liquid_buffer_sptr_swigregister
liquid_buffer_sptr_swigregister(liquid_buffer_sptr)

liquid_buffer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
liquid_buffer = liquid_buffer.make;

class multichan_ed(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::multichan_ed.

    To avoid accidental use of raw pointers, utils::multichan_ed's constructor is in a private implementation class. utils::multichan_ed::make is the public interface for creating new instances.

    Args:
        fft_len : 
        threshold : 
        num_channels : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fft_len, float threshold, int num_channels) -> multichan_ed_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::multichan_ed.

        To avoid accidental use of raw pointers, utils::multichan_ed's constructor is in a private implementation class. utils::multichan_ed::make is the public interface for creating new instances.

        Args:
            fft_len : 
            threshold : 
            num_channels : 
        """
        return _utils_swig.multichan_ed_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _utils_swig.delete_multichan_ed
    __del__ = lambda self : None;
multichan_ed_swigregister = _utils_swig.multichan_ed_swigregister
multichan_ed_swigregister(multichan_ed)

def multichan_ed_make(*args, **kwargs):
  """
    multichan_ed_make(int fft_len, float threshold, int num_channels) -> multichan_ed_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of utils::multichan_ed.

    To avoid accidental use of raw pointers, utils::multichan_ed's constructor is in a private implementation class. utils::multichan_ed::make is the public interface for creating new instances.

    Args:
        fft_len : 
        threshold : 
        num_channels : 
    """
  return _utils_swig.multichan_ed_make(*args, **kwargs)

class multichan_ed_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::utils::multichan_ed)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::utils::multichan_ed)> self) -> multichan_ed_sptr
        __init__(boost::shared_ptr<(gr::utils::multichan_ed)> self, multichan_ed p) -> multichan_ed_sptr
        """
        this = _utils_swig.new_multichan_ed_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multichan_ed_sptr self) -> multichan_ed"""
        return _utils_swig.multichan_ed_sptr___deref__(self)

    __swig_destroy__ = _utils_swig.delete_multichan_ed_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multichan_ed_sptr self, int fft_len, float threshold, int num_channels) -> multichan_ed_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of utils::multichan_ed.

        To avoid accidental use of raw pointers, utils::multichan_ed's constructor is in a private implementation class. utils::multichan_ed::make is the public interface for creating new instances.

        Args:
            fft_len : 
            threshold : 
            num_channels : 
        """
        return _utils_swig.multichan_ed_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(multichan_ed_sptr self) -> unsigned int"""
        return _utils_swig.multichan_ed_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multichan_ed_sptr self, int which, int delay)
        declare_sample_delay(multichan_ed_sptr self, unsigned int delay)
        """
        return _utils_swig.multichan_ed_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multichan_ed_sptr self, int which) -> unsigned int"""
        return _utils_swig.multichan_ed_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multichan_ed_sptr self) -> int"""
        return _utils_swig.multichan_ed_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multichan_ed_sptr self) -> double"""
        return _utils_swig.multichan_ed_sptr_relative_rate(self)

    def start(self):
        """start(multichan_ed_sptr self) -> bool"""
        return _utils_swig.multichan_ed_sptr_start(self)

    def stop(self):
        """stop(multichan_ed_sptr self) -> bool"""
        return _utils_swig.multichan_ed_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multichan_ed_sptr self, unsigned int which_input) -> uint64_t"""
        return _utils_swig.multichan_ed_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multichan_ed_sptr self, unsigned int which_output) -> uint64_t"""
        return _utils_swig.multichan_ed_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multichan_ed_sptr self) -> int"""
        return _utils_swig.multichan_ed_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multichan_ed_sptr self, int m)"""
        return _utils_swig.multichan_ed_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multichan_ed_sptr self)"""
        return _utils_swig.multichan_ed_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multichan_ed_sptr self) -> bool"""
        return _utils_swig.multichan_ed_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multichan_ed_sptr self, int m)"""
        return _utils_swig.multichan_ed_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multichan_ed_sptr self) -> int"""
        return _utils_swig.multichan_ed_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multichan_ed_sptr self, int i) -> long"""
        return _utils_swig.multichan_ed_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multichan_ed_sptr self, long max_output_buffer)
        set_max_output_buffer(multichan_ed_sptr self, int port, long max_output_buffer)
        """
        return _utils_swig.multichan_ed_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multichan_ed_sptr self, int i) -> long"""
        return _utils_swig.multichan_ed_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multichan_ed_sptr self, long min_output_buffer)
        set_min_output_buffer(multichan_ed_sptr self, int port, long min_output_buffer)
        """
        return _utils_swig.multichan_ed_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multichan_ed_sptr self, int which) -> float
        pc_input_buffers_full(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multichan_ed_sptr self, int which) -> float
        pc_input_buffers_full_avg(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multichan_ed_sptr self, int which) -> float
        pc_input_buffers_full_var(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multichan_ed_sptr self, int which) -> float
        pc_output_buffers_full(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multichan_ed_sptr self, int which) -> float
        pc_output_buffers_full_avg(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multichan_ed_sptr self, int which) -> float
        pc_output_buffers_full_var(multichan_ed_sptr self) -> pmt_vector_float
        """
        return _utils_swig.multichan_ed_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multichan_ed_sptr self) -> float"""
        return _utils_swig.multichan_ed_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multichan_ed_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _utils_swig.multichan_ed_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multichan_ed_sptr self)"""
        return _utils_swig.multichan_ed_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multichan_ed_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _utils_swig.multichan_ed_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multichan_ed_sptr self) -> int"""
        return _utils_swig.multichan_ed_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multichan_ed_sptr self) -> int"""
        return _utils_swig.multichan_ed_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multichan_ed_sptr self, int priority) -> int"""
        return _utils_swig.multichan_ed_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multichan_ed_sptr self) -> std::string"""
        return _utils_swig.multichan_ed_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multichan_ed_sptr self) -> std::string"""
        return _utils_swig.multichan_ed_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multichan_ed_sptr self) -> io_signature_sptr"""
        return _utils_swig.multichan_ed_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multichan_ed_sptr self) -> io_signature_sptr"""
        return _utils_swig.multichan_ed_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multichan_ed_sptr self) -> long"""
        return _utils_swig.multichan_ed_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multichan_ed_sptr self) -> basic_block_sptr"""
        return _utils_swig.multichan_ed_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multichan_ed_sptr self, int ninputs, int noutputs) -> bool"""
        return _utils_swig.multichan_ed_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multichan_ed_sptr self) -> std::string"""
        return _utils_swig.multichan_ed_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multichan_ed_sptr self, std::string name)"""
        return _utils_swig.multichan_ed_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multichan_ed_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _utils_swig.multichan_ed_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multichan_ed_sptr self) -> swig_int_ptr"""
        return _utils_swig.multichan_ed_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multichan_ed_sptr self) -> swig_int_ptr"""
        return _utils_swig.multichan_ed_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multichan_ed_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _utils_swig.multichan_ed_sptr_message_subscribers(self, *args, **kwargs)

multichan_ed_sptr_swigregister = _utils_swig.multichan_ed_sptr_swigregister
multichan_ed_sptr_swigregister(multichan_ed_sptr)

multichan_ed_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multichan_ed = multichan_ed.make;



